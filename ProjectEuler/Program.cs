using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectEuler
{
    interface Problem
    {
        string Solution();
    }
    class Solution001 : Problem
    {
        // Multiples of 3 and 5
        /* If we list all the natural numbers below 10 that are multiples of 3 
         * or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find 
         * the sum of all the multiples of 3 or 5 below 1000.
         */ 
        public string Solution()
        {
            int SolutionInt = 0;
            for (int i = 0; i < 1000; i++)
            {
                SolutionInt += (i % 5 == 0 ? i : i % 3 == 0 ? i : 0);
            }
            return SolutionInt.ToString();
        }
    }
    class Solution002 : Problem
    {
        // Even Fibonacci numbers
        /* Each new term in the Fibonacci sequence is generated by adding the 
         * previous two terms. By starting with 1 and 2, the first 10 terms will be:
         * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
         * By considering the terms in the Fibonacci sequence whose values do 
         * not exceed four million, find the sum of the even-valued terms.
         */
        public Dictionary<int, int> fib = new Dictionary<int,int>();
        public int Fib(int n)
        {
            int fibReturn;
            if (n < 2) { fibReturn = n; }
            else 
            {
                int fib1 = fib.TryGetValue(n - 1, out fib1) ? fib1 : Fib(n-1);
                int fib2 = fib.TryGetValue(n - 2, out fib2) ? fib2 : Fib(n-2);
                fibReturn = fib1 + fib2;
            }
            if (!fib.ContainsKey(n)) { fib.Add(n, fibReturn); }
            return fibReturn;
        }
        public string Solution()
        {
            int SolutionInt = 0;
            int n = 0;
            while (Fib(n) < 4000000)
            {
                SolutionInt += (Fib(n) % 2 == 0) ? Fib(n) : 0;
                n++;
            }
            return SolutionInt.ToString();
        }
    }
    class Solution003 : Problem
    {
        //Largest prime factor
        /* The prime factors of 13195 are 5, 7, 13 and 29.
         * What is the largest prime factor of the number 600851475143 ?
         */
        HashSet<int> primes = new HashSet<int>();
        bool isPrime(int n)
        {
            if (primes.Contains(n)) { return true; }
            else 
            {
                for (int i = 2; i < Convert.ToInt32(Math.Sqrt(n)); i++)
                {
                    if (n % i == 0) { return false; }
                }
            }
            primes.Add(n);
            return true;
        }
        public string Solution()
        {
            return "";
        }
    }
    class Run
    {
        static void Main(string[] args)
        {
            Problem solution = new Solution002();
            Console.WriteLine(solution.Solution());
            Console.ReadKey();
        }
    }

}
